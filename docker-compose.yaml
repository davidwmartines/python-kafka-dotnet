version: '3.7'

services:

  zookeeper:
    image: bitnami/zookeeper:3.7.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ALLOW_ANONYMOUS_LOGIN: 'yes'
    ports:
      - 22181:2181

  kafka:
    image: bitnami/kafka:3.3.1
    depends_on:
      - zookeeper
    ports:
      - 29092:29092
    environment:
      ALLOW_PLAINTEXT_LISTENER: 'yes'
      KAFKA_CFG_ZOOKEEPER_CONNECT: zookeeper:2181

  schema-registry:
    image: confluentinc/cp-schema-registry:6.2.0
    hostname: schema-registry
    depends_on:
      - kafka
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'kafka:9092'
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
      SCHEMA_REGISTRY_SCHEMA_COMPATIBILITY_LEVEL: full

  python-producer:
    build: ./python-producer
    env_file:
      - ./python-producer/.env
    depends_on:
      - schema-registry
    restart: always
    volumes:
      - ./wait-for-it.sh:/code/wait-for-it.sh
    command:
      [
        "./wait-for-it.sh",
        "schema-registry:8081",
        "--",
        "python3",
        "./produce_events.py"
      ]

  python-consumer:
    build: ./python-consumer
    env_file:
      - ./python-consumer/.env
    depends_on:
      - schema-registry
    restart: always
    volumes:
      - ./wait-for-it.sh:/code/wait-for-it.sh
    command:
      [
        "./wait-for-it.sh",
        "schema-registry:8081",
        "--",
        "python3",
        "./consume_events.py"
      ]

  dotnet-consumer:
    build: ./dotnet-consumer
    env_file:
      - ./dotnet-consumer/.env
    depends_on:
      - schema-registry
    restart: always
    volumes:
      - ./wait-for-it.sh:/App/wait-for-it.sh
    command:
      [
        "./wait-for-it.sh",
        "schema-registry:8081",
        "--",
        "dotnet",
        "dotnet-consumer.dll"
      ]
